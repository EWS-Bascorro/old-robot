;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 01/03/2018
;Author  : Hanifudin
;Company : URDC
;Comments:
;
;
;Chip type               : ATmega328
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;
;int ex,ye;
;
;char Data1[4],Data2[4],Data3[4];
;unsigned char Count2,Count1,Count0,DataRx;
;
;void konversi();
;void init();
;
;interrupt [SPI_STC] void spi_isr(void)
; 0000 0025 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0026 char status,data;
; 0000 0027 data=SPDR;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0028 switch(DataRx)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0029 {
; 0000 002A     case 0:
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002B                 if(data=='!'){DataRx=1; Count0=0;Data1[0]=NULL;Data1[1]=NULL;Data1[2]=NULL;Data1[3]=NULL;}
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002C                 if(data=='@'){DataRx=2; Count1=0;Data2[0]=NULL;Data2[1]=NULL;Data2[2]=NULL;Data2[3]=NULL;}
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 002D 
; 0000 002E     break;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 002F 
; 0000 0030     case 1:
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0031         if(data=='|'){DataRx=0; Count0=0;}
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0032         else {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0033         Data1[Count0] = data; Count0++;}
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0034     break;
;PCODE: $0000004C VOL: 0
; 0000 0035 
; 0000 0036     case 2:
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0037         if(data=='|'){DataRx=0; Count1=0;}
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0038         else{
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0039         Data2[Count1]=data; Count1++;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003A         }
;PCODE: $0000005C VOL: 0
; 0000 003B     break;
;PCODE: $0000005D VOL: 0
; 0000 003C   }
;PCODE: $0000005E VOL: 0
; 0000 003D }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;
;void konversi(){
; 0000 003F void konversi(){
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0040     ex = atoi(Data1);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0041     ye = atoi(Data2);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0042 }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;
;void main(void){
; 0000 0044 void main(void){
;PCODE: $0000006D VOL: 0
; 0000 0045  init();
;PCODE: $0000006E VOL: 0
; 0000 0046  while(1){
;PCODE: $0000006F VOL: 0
; 0000 0047   konversi();
;PCODE: $00000070 VOL: 0
; 0000 0048   printf("%d %d\r\n",ex,ye);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0049  }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 004A }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;
;void init()
; 0000 004D {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 004E // Declare your local variables here
; 0000 004F 
; 0000 0050 // Crystal Oscillator division factor: 1
; 0000 0051 #pragma optsize-
; 0000 0052 CLKPR=0x80;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0053 CLKPR=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0054 #ifdef _OPTIMIZE_SIZE_
; 0000 0055 #pragma optsize+
; 0000 0056 #endif
; 0000 0057 
; 0000 0058 // Input/Output Ports initialization
; 0000 0059 // Port B initialization
; 0000 005A // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 005B // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
; 0000 005C PORTB=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 005D DDRB=0x10;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 005E 
; 0000 005F // Port C initialization
; 0000 0060 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0061 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0062 PORTC=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0063 DDRC=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0064 
; 0000 0065 // Port D initialization
; 0000 0066 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0067 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0068 PORTD=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0069 DDRD=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 006A 
; 0000 006B // Timer/Counter 0 initialization
; 0000 006C // Clock source: System Clock
; 0000 006D // Clock value: Timer 0 Stopped
; 0000 006E // Mode: Normal top=0xFF
; 0000 006F // OC0A output: Disconnected
; 0000 0070 // OC0B output: Disconnected
; 0000 0071 TCCR0A=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0072 TCCR0B=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0073 TCNT0=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0074 OCR0A=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0075 OCR0B=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0076 
; 0000 0077 // Timer/Counter 1 initialization
; 0000 0078 // Clock source: System Clock
; 0000 0079 // Clock value: Timer1 Stopped
; 0000 007A // Mode: Normal top=0xFFFF
; 0000 007B // OC1A output: Discon.
; 0000 007C // OC1B output: Discon.
; 0000 007D // Noise Canceler: Off
; 0000 007E // Input Capture on Falling Edge
; 0000 007F // Timer1 Overflow Interrupt: Off
; 0000 0080 // Input Capture Interrupt: Off
; 0000 0081 // Compare A Match Interrupt: Off
; 0000 0082 // Compare B Match Interrupt: Off
; 0000 0083 TCCR1A=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0084 TCCR1B=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0085 TCNT1H=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0086 TCNT1L=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0087 ICR1H=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0088 ICR1L=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0089 OCR1AH=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 008A OCR1AL=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 008B OCR1BH=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 008C OCR1BL=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 008D 
; 0000 008E // Timer/Counter 2 initialization
; 0000 008F // Clock source: System Clock
; 0000 0090 // Clock value: Timer2 Stopped
; 0000 0091 // Mode: Normal top=0xFF
; 0000 0092 // OC2A output: Disconnected
; 0000 0093 // OC2B output: Disconnected
; 0000 0094 ASSR=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0095 TCCR2A=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0096 TCCR2B=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0097 TCNT2=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0098 OCR2A=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0099 OCR2B=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 009A 
; 0000 009B // External Interrupt(s) initialization
; 0000 009C // INT0: Off
; 0000 009D // INT1: Off
; 0000 009E // Interrupt on any change on pins PCINT0-7: Off
; 0000 009F // Interrupt on any change on pins PCINT8-14: Off
; 0000 00A0 // Interrupt on any change on pins PCINT16-23: Off
; 0000 00A1 EICRA=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00A2 EIMSK=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00A3 PCICR=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00A4 
; 0000 00A5 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00A6 TIMSK0=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00A7 
; 0000 00A8 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00A9 TIMSK1=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00AA 
; 0000 00AB // Timer/Counter 2 Interrupt(s) initialization
; 0000 00AC TIMSK2=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00AD 
; 0000 00AE // USART initialization
; 0000 00AF // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00B0 // USART Receiver: Off
; 0000 00B1 // USART Transmitter: On
; 0000 00B2 // USART0 Mode: Asynchronous
; 0000 00B3 // USART Baud Rate: 9600
; 0000 00B4 UCSR0A=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00B5 UCSR0B=0x08;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00B6 UCSR0C=0x06;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00B7 UBRR0H=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00B8 UBRR0L=0x67;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00B9 
; 0000 00BA // Analog Comparator initialization
; 0000 00BB // Analog Comparator: Off
; 0000 00BC // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00BD ACSR=0x80;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00BE ADCSRB=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00BF DIDR1=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00C0 
; 0000 00C1 // ADC initialization
; 0000 00C2 // ADC disabled
; 0000 00C3 ADCSRA=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00C4 
; 0000 00C5 // SPI initialization
; 0000 00C6 // SPI Type: Slave
; 0000 00C7 // SPI Clock Phase: Cycle Start
; 0000 00C8 // SPI Clock Polarity: Low
; 0000 00C9 // SPI Data Order: MSB First
; 0000 00CA SPCR=0xC0;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00CB SPSR=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00CC 
; 0000 00CD // Clear the SPI interrupt flag
; 0000 00CE #asm
;PCODE: $000000E1 VOL: 0
; 0000 00CF     in   r30,spsr
    in   r30,spsr
;PCODE: $000000E2 VOL: 0
; 0000 00D0     in   r30,spdr
    in   r30,spdr
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00D1 #endasm
; 0000 00D2 
; 0000 00D3 // TWI initialization
; 0000 00D4 // TWI disabled
; 0000 00D5 TWCR=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00D6 
; 0000 00D7 // Global enable interrupts
; 0000 00D8 #asm("sei")
;PCODE: $000000E7 VOL: 0
	sei
;PCODE: $000000E8 VOL: 0
; 0000 00D9 
; 0000 00DA }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
